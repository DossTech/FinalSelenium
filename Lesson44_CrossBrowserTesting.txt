<=======================================================================================>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	
	<test thread-count="5" name="Test1">
	<parameter name="browser" value="edge"></parameter>
		<classes>
			<class name="crossbrowser.ReadExcel" />
			<class name="crossbrowser.CreateLead" />
		</classes>
	</test> <!--
	Test -->
	<test thread-count="5" name="Test2">
		<parameter name="browser" value="chrome"></parameter>
		<classes>
			<class name="crossbrowser.ReadExcel" />
			<class name="crossbrowser.CreateLead" />
		</classes>
	</test> <!--
	Test -->
	<test thread-count="5" name="Test3">
	<parameter name="browser" value="firefox"></parameter>
		<classes>
			<class name="crossbrowser.ReadExcel" />
			<class name="crossbrowser.CreateLead" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->

<================================================================================================>
package crossbrowser;

import java.io.IOException;

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Parameters;

public class BaseClass {
	public static RemoteWebDriver driver;
	public String fileName;

	@Parameters({ "browser" })
	@BeforeMethod(alwaysRun = true)
	public void beforeMethod(String browser) {
		if (browser.equalsIgnoreCase("edge")) {
			driver = new EdgeDriver();
		} else if (browser.equalsIgnoreCase("chrome")) {
			driver = new ChromeDriver();
		} else {
			driver = new FirefoxDriver();
		}

		driver.get("http://leaftaps.com/opentaps/control/main");
		driver.findElement(By.id("username")).sendKeys("DemoSalesManager");
		driver.findElement(By.id("password")).sendKeys("crmsfa");
		driver.findElement(By.className("decorativeSubmit")).click();
		driver.findElement(By.xpath("//a[text()[normalize-space() ='CRM/SFA']]")).click();

		String title = driver.getTitle();

		Assert.assertEquals(title, "My Home | opentaps CRM");

	}

	@AfterMethod
	public void afterMethod() {
		driver.close();

	}

	@DataProvider(name = "testdata1")
	public String[][] sendData() throws IOException {

		return ReadExcel.readExcel(fileName);
	}
}

<================================================================================================>
package crossbrowser;

import org.openqa.selenium.By;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

public class CreateLead extends BaseClass {

	@BeforeClass
	public void setUp() {

		fileName = "CreateLead";

	}

	@Test(dataProvider = "testdata1")
	public void createLead(String firstName, String secondName, String CompanyName) {

		driver.findElement(By.linkText("Leads")).click();
		driver.findElement(By.linkText("Create Lead")).click();
		SoftAssert sa = new SoftAssert();

		String title = driver.getTitle();

		sa.assertEquals(title, "Create Lead | opentaps CRM");

		// firstName
		driver.findElement(By.id("createLeadForm_firstName")).sendKeys(firstName);

		// lastName
		driver.findElement(By.id("createLeadForm_lastName")).sendKeys(secondName);

		// companyName
		driver.findElement(By.id("createLeadForm_companyName")).sendKeys(CompanyName);

		sa.assertAll();
	}
}

<================================================================================================>
package crossbrowser;

import java.io.FileInputStream;
import java.io.IOException;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.Test;

public class ReadExcel {
	@Test
	public static String[][] readExcel(String fileName) throws IOException {

		FileInputStream file = new FileInputStream(".\\data\\"+fileName+".xlsx");

		XSSFWorkbook book = new XSSFWorkbook(file);

		XSSFSheet sheet = book.getSheet("Sheet1");

		int rows = sheet.getLastRowNum();
		short cells = sheet.getRow(0).getLastCellNum();

		String data[][] = new String[rows][cells];

		for (int i = 1; i <=rows; i++) {
			
			for (int j = 0; j <cells; j++) {

				XSSFCell cell = sheet.getRow(i).getCell(j);
			String cellValue = cell.getStringCellValue();

				
					data[i-1][j] = cellValue;
			}
	
		}
		
book.close();
return data;
	}
}

<================================================================================================>
package crossbrowser;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class Retest implements IRetryAnalyzer{

	int count = 0;
	
	public boolean retry(ITestResult result) {
		
		if (count<1) {
			count++;
			return true;
		}
		return false;
	}
}

<================================================================================================>
package crossbrowser;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.testng.IAnnotationTransformer;
import org.testng.annotations.ITestAnnotation;

public class RetryListener implements IAnnotationTransformer{


	public void transform(
			ITestAnnotation annotation,
	Class testClass,
	Constructor testConstructor,
	Method testMethod) {
		 annotation.setRetryAnalyzer(learnassertion.Retest.class);

	}


	/*
	 public void transform(
		      ITestAnnotation annotation,
		      Class testClass, 
		      Constructor testConstructor, 
		      Method testMethod) {
		    // not implemented
		  }
		  */
}

<================================================================================================>
<================================================================================================>
